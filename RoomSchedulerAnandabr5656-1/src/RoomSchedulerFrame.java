/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author AnandRajan
 */

import java.sql.Date;
import java.sql.Timestamp;
import java.util.ArrayList;

public class RoomSchedulerFrame extends javax.swing.JFrame {

    /**
     * Creates new form RoomSchedulerFrame
     */
    public RoomSchedulerFrame() {
        initComponents();
        rebuildFacultyComboBoxes();
        rebuildDateComboBoxes();
        waitlistStatusTextArea.setVisible(false);
        reservationStatusTextArea.setVisible(false);
        facultyStatusTextArea.setVisible(false);
        dropRoomTextArea.setVisible(false);

    }
    
    public void rebuildFacultyComboBoxes()
    {
        reserveFacultyComboBox.setModel(new javax.swing.DefaultComboBoxModel(Faculty.getFacultyList().toArray()));
        facultyStatusComboBox.setModel(new javax.swing.DefaultComboBoxModel(Faculty.getFacultyList().toArray()));
        cancelFacultyComboBox.setModel(new javax.swing.DefaultComboBoxModel(Faculty.getFacultyList().toArray()));
    }
    
    public void rebuildDateComboBoxes()
    {
        reserveDateComboBox.setModel(new javax.swing.DefaultComboBoxModel(Dates.getAllDates().toArray()));
        statusDateComboBox.setModel(new javax.swing.DefaultComboBoxModel(Dates.getAllDates().toArray()));        
        cancelDateComboBox.setModel(new javax.swing.DefaultComboBoxModel(Dates.getAllDates().toArray()));        
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        appLabel = new javax.swing.JLabel();
        collegeLabel = new javax.swing.JLabel();
        commandPane = new javax.swing.JTabbedPane();
        addFacultyPanel = new javax.swing.JPanel();
        facultyNameLabel = new javax.swing.JLabel();
        addFacultyTextField = new javax.swing.JTextField();
        addFacultyButton = new javax.swing.JButton();
        addFacultyStatusLabel = new javax.swing.JLabel();
        addValueFacultyLabel = new javax.swing.JLabel();
        addValueDateLabel = new javax.swing.JLabel();
        dateLabel = new javax.swing.JLabel();
        addDateTextField = new javax.swing.JTextField();
        addDateButton = new javax.swing.JButton();
        addDateStatusLabel = new javax.swing.JLabel();
        roomLabel = new javax.swing.JLabel();
        roomNameLabel = new javax.swing.JLabel();
        roomSeatsLabel = new javax.swing.JLabel();
        addRoomNameTextField = new javax.swing.JTextField();
        addRoomSeatsTextField = new javax.swing.JTextField();
        addRoomButton = new javax.swing.JButton();
        addRoomStatusLabel = new javax.swing.JLabel();
        dropRoomLabel = new javax.swing.JLabel();
        dropRoomNameLabel = new javax.swing.JLabel();
        dropRoomTextField = new javax.swing.JTextField();
        dropRoomButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        dropRoomTextArea = new javax.swing.JTextArea();
        reserveRoomPanel = new javax.swing.JPanel();
        facultyChooseLabel = new javax.swing.JLabel();
        dateChooseLabel = new javax.swing.JLabel();
        seatsRequiredLabel = new javax.swing.JLabel();
        reserveFacultyComboBox = new javax.swing.JComboBox<>();
        reserveDateComboBox = new javax.swing.JComboBox<>();
        reserveSeatsTextField = new javax.swing.JTextField();
        reserveSubmitButton = new javax.swing.JButton();
        reserveStatusLabel = new javax.swing.JLabel();
        reserveOptionLabel = new javax.swing.JLabel();
        cancelReservationLabel = new javax.swing.JLabel();
        cancelFacultyLabel = new javax.swing.JLabel();
        cancelFacultyComboBox = new javax.swing.JComboBox<>();
        cancelDateLabel = new javax.swing.JLabel();
        cancelDateComboBox = new javax.swing.JComboBox<>();
        cancelReservationButton = new javax.swing.JButton();
        cancelStatusLabel = new javax.swing.JLabel();
        waitlistToReservationLabel = new javax.swing.JLabel();
        reservationStatusPanel = new javax.swing.JPanel();
        reserveDateLabel = new javax.swing.JLabel();
        reserveStatusButton = new javax.swing.JButton();
        reservationStatusScrollPane = new javax.swing.JScrollPane();
        reservationStatusTextArea = new javax.swing.JTextArea();
        statusDateComboBox = new javax.swing.JComboBox<>();
        waitlistStatusPanel = new javax.swing.JPanel();
        waitlistByDateBtn = new javax.swing.JButton();
        waitlistStatusScrollPane = new javax.swing.JScrollPane();
        waitlistStatusTextArea = new javax.swing.JTextArea();
        facultyStatusPanel = new javax.swing.JPanel();
        facultyNameStatusLabel = new javax.swing.JLabel();
        facultyStatusComboBox = new javax.swing.JComboBox<>();
        facultyStatusButton = new javax.swing.JButton();
        facultyStatusScrollPane = new javax.swing.JScrollPane();
        facultyStatusTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        appLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        appLabel.setForeground(new java.awt.Color(138, 3, 3));
        appLabel.setText("Room Scheduler");

        collegeLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 22)); // NOI18N
        collegeLabel.setForeground(new java.awt.Color(120, 103, 243));
        collegeLabel.setText("Tiny College");

        facultyNameLabel.setText("Faculty Name:");
        facultyNameLabel.setPreferredSize(new java.awt.Dimension(77, 14));

        addFacultyTextField.setSize(new java.awt.Dimension(204, 18));

        addFacultyButton.setText("Submit");
        addFacultyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFacultyButtonActionPerformed(evt);
            }
        });

        addFacultyStatusLabel.setMaximumSize(new java.awt.Dimension(12, 14));
        addFacultyStatusLabel.setMinimumSize(new java.awt.Dimension(12, 14));
        addFacultyStatusLabel.setPreferredSize(new java.awt.Dimension(12, 14));

        addValueFacultyLabel.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        addValueFacultyLabel.setText("Add Faculty");

        addValueDateLabel.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        addValueDateLabel.setText("Add Date");

        dateLabel.setText("Date (in YYYY-MM-DD format):          ");

        addDateButton.setText("Submit");
        addDateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDateButtonActionPerformed(evt);
            }
        });

        roomLabel.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        roomLabel.setText("Add Room");

        roomNameLabel.setText("Room Name:     ");

        roomSeatsLabel.setText("Number of Seats:     ");

        addRoomButton.setText("Submit");
        addRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRoomButtonActionPerformed(evt);
            }
        });

        dropRoomLabel.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        dropRoomLabel.setText("Drop Room");

        dropRoomNameLabel.setText("Room Name:");

        dropRoomButton.setText("Drop");
        dropRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropRoomButtonActionPerformed(evt);
            }
        });

        dropRoomTextArea.setEditable(false);
        dropRoomTextArea.setColumns(20);
        dropRoomTextArea.setRows(5);
        dropRoomTextArea.setBorder(null);
        jScrollPane1.setViewportView(dropRoomTextArea);

        javax.swing.GroupLayout addFacultyPanelLayout = new javax.swing.GroupLayout(addFacultyPanel);
        addFacultyPanel.setLayout(addFacultyPanelLayout);
        addFacultyPanelLayout.setHorizontalGroup(
            addFacultyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addFacultyPanelLayout.createSequentialGroup()
                .addGroup(addFacultyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addFacultyPanelLayout.createSequentialGroup()
                        .addGap(162, 162, 162)
                        .addGroup(addFacultyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(addFacultyPanelLayout.createSequentialGroup()
                                .addComponent(addFacultyButton)
                                .addGap(27, 27, 27)
                                .addComponent(addFacultyStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(addFacultyPanelLayout.createSequentialGroup()
                                .addComponent(addRoomButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(addRoomStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(addFacultyPanelLayout.createSequentialGroup()
                        .addGroup(addFacultyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(addFacultyPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(addFacultyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(addFacultyPanelLayout.createSequentialGroup()
                                        .addComponent(facultyNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(20, 20, 20)
                                        .addComponent(addFacultyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(addValueFacultyLabel)
                                    .addComponent(addValueDateLabel)
                                    .addGroup(addFacultyPanelLayout.createSequentialGroup()
                                        .addComponent(dateLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(addDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(addFacultyPanelLayout.createSequentialGroup()
                                .addGap(162, 162, 162)
                                .addComponent(addDateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(addDateStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(addFacultyPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(roomLabel))
                            .addGroup(addFacultyPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(addFacultyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(addFacultyPanelLayout.createSequentialGroup()
                                        .addComponent(roomNameLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(addRoomNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(addFacultyPanelLayout.createSequentialGroup()
                                        .addComponent(roomSeatsLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(addRoomSeatsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(addFacultyPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(addFacultyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dropRoomLabel)
                                    .addGroup(addFacultyPanelLayout.createSequentialGroup()
                                        .addComponent(dropRoomNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(dropRoomTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(addFacultyPanelLayout.createSequentialGroup()
                                        .addGap(99, 99, 99)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(addFacultyPanelLayout.createSequentialGroup()
                                .addGap(162, 162, 162)
                                .addComponent(dropRoomButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        addFacultyPanelLayout.setVerticalGroup(
            addFacultyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addFacultyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addValueFacultyLabel)
                .addGap(11, 11, 11)
                .addGroup(addFacultyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addFacultyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(facultyNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(addFacultyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addFacultyButton)
                    .addComponent(addFacultyStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addComponent(addValueDateLabel)
                .addGap(21, 21, 21)
                .addGroup(addFacultyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateLabel)
                    .addComponent(addDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(addFacultyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addDateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addDateStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addComponent(roomLabel)
                .addGap(18, 18, 18)
                .addGroup(addFacultyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roomNameLabel)
                    .addComponent(addRoomNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(addFacultyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roomSeatsLabel)
                    .addComponent(addRoomSeatsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(addFacultyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addRoomButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addRoomStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addComponent(dropRoomLabel)
                .addGap(18, 18, 18)
                .addGroup(addFacultyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dropRoomNameLabel)
                    .addComponent(dropRoomTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(dropRoomButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                .addContainerGap())
        );

        commandPane.addTab("Add/Drop", addFacultyPanel);

        facultyChooseLabel.setText("Faculty: ");

        dateChooseLabel.setText("Date: ");

        seatsRequiredLabel.setText("Seats Required: ");

        reserveFacultyComboBox.setSize(new java.awt.Dimension(31, 23));

        reserveSeatsTextField.setSize(new java.awt.Dimension(34, 18));

        reserveSubmitButton.setText("Submit");
        reserveSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reserveSubmitButtonActionPerformed(evt);
            }
        });

        reserveOptionLabel.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        reserveOptionLabel.setText("Reserve a Room");

        cancelReservationLabel.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        cancelReservationLabel.setText("Cancel a Reservation");

        cancelFacultyLabel.setText("Faculty:");

        cancelDateLabel.setText("Date:");

        cancelReservationButton.setText("Submit");
        cancelReservationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelReservationButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout reserveRoomPanelLayout = new javax.swing.GroupLayout(reserveRoomPanel);
        reserveRoomPanel.setLayout(reserveRoomPanelLayout);
        reserveRoomPanelLayout.setHorizontalGroup(
            reserveRoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reserveRoomPanelLayout.createSequentialGroup()
                .addGroup(reserveRoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(reserveRoomPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(reserveStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(reserveRoomPanelLayout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(reserveSubmitButton))
                    .addGroup(reserveRoomPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(reserveRoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(seatsRequiredLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dateChooseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(facultyChooseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(reserveRoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(reserveFacultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(reserveDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(reserveSeatsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(reserveRoomPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(reserveOptionLabel))
                    .addGroup(reserveRoomPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(cancelReservationLabel))
                    .addGroup(reserveRoomPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(reserveRoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cancelDateLabel)
                            .addComponent(cancelFacultyLabel))
                        .addGap(78, 78, 78)
                        .addGroup(reserveRoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cancelFacultyComboBox, 0, 69, Short.MAX_VALUE)
                            .addComponent(cancelDateComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(reserveRoomPanelLayout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(cancelReservationButton))
                    .addGroup(reserveRoomPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(cancelStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(reserveRoomPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(waitlistToReservationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(65, Short.MAX_VALUE))
        );
        reserveRoomPanelLayout.setVerticalGroup(
            reserveRoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reserveRoomPanelLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(reserveOptionLabel)
                .addGap(18, 18, 18)
                .addGroup(reserveRoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(facultyChooseLabel)
                    .addComponent(reserveFacultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(reserveRoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateChooseLabel)
                    .addComponent(reserveDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(reserveRoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(seatsRequiredLabel)
                    .addComponent(reserveSeatsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addComponent(reserveSubmitButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(reserveStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(cancelReservationLabel)
                .addGap(18, 18, 18)
                .addGroup(reserveRoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelFacultyLabel)
                    .addComponent(cancelFacultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(reserveRoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelDateLabel)
                    .addComponent(cancelDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(cancelReservationButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cancelStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(waitlistToReservationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(254, Short.MAX_VALUE))
        );

        commandPane.addTab("Reserve / Cancel", reserveRoomPanel);

        reserveDateLabel.setText("Reservation Date: ");

        reserveStatusButton.setText("Submit");
        reserveStatusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reserveStatusButtonActionPerformed(evt);
            }
        });

        reservationStatusTextArea.setEditable(false);
        reservationStatusTextArea.setColumns(20);
        reservationStatusTextArea.setRows(10);
        reservationStatusTextArea.setBorder(null);
        reservationStatusTextArea.setMinimumSize(new java.awt.Dimension(300, 150));
        reservationStatusScrollPane.setViewportView(reservationStatusTextArea);

        statusDateComboBox.setMaximumSize(new java.awt.Dimension(31, 23));
        statusDateComboBox.setSize(new java.awt.Dimension(31, 23));

        javax.swing.GroupLayout reservationStatusPanelLayout = new javax.swing.GroupLayout(reservationStatusPanel);
        reservationStatusPanel.setLayout(reservationStatusPanelLayout);
        reservationStatusPanelLayout.setHorizontalGroup(
            reservationStatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reservationStatusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(reserveDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(reservationStatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(reserveStatusButton)
                    .addComponent(reservationStatusScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(reservationStatusPanelLayout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(statusDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(85, Short.MAX_VALUE))
        );
        reservationStatusPanelLayout.setVerticalGroup(
            reservationStatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reservationStatusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(reservationStatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reserveDateLabel)
                    .addComponent(statusDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(reserveStatusButton)
                .addGap(18, 18, 18)
                .addComponent(reservationStatusScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(357, Short.MAX_VALUE))
        );

        commandPane.addTab("Reservation Status", reservationStatusPanel);

        waitlistByDateBtn.setText("Update Waitlist Status (By Date)");
        waitlistByDateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                waitlistByDateBtnActionPerformed(evt);
            }
        });

        waitlistStatusTextArea.setEditable(false);
        waitlistStatusTextArea.setColumns(20);
        waitlistStatusTextArea.setRows(5);
        waitlistStatusTextArea.setBorder(null);
        waitlistStatusTextArea.setMinimumSize(new java.awt.Dimension(300, 150));
        waitlistStatusScrollPane.setViewportView(waitlistStatusTextArea);

        javax.swing.GroupLayout waitlistStatusPanelLayout = new javax.swing.GroupLayout(waitlistStatusPanel);
        waitlistStatusPanel.setLayout(waitlistStatusPanelLayout);
        waitlistStatusPanelLayout.setHorizontalGroup(
            waitlistStatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(waitlistStatusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(waitlistStatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(waitlistStatusScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE)
                    .addComponent(waitlistByDateBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        waitlistStatusPanelLayout.setVerticalGroup(
            waitlistStatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(waitlistStatusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(waitlistByDateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(waitlistStatusScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 592, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(114, Short.MAX_VALUE))
        );

        commandPane.addTab("Waitlist Status", waitlistStatusPanel);

        facultyNameStatusLabel.setText("Faculty Name:     ");

        facultyStatusButton.setText("Submit");
        facultyStatusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                facultyStatusButtonActionPerformed(evt);
            }
        });

        facultyStatusTextArea.setColumns(20);
        facultyStatusTextArea.setRows(10);
        facultyStatusTextArea.setMinimumSize(new java.awt.Dimension(200, 70));
        facultyStatusTextArea.setPreferredSize(new java.awt.Dimension(300, 150));
        facultyStatusTextArea.setSize(new java.awt.Dimension(300, 150));
        facultyStatusScrollPane.setViewportView(facultyStatusTextArea);

        javax.swing.GroupLayout facultyStatusPanelLayout = new javax.swing.GroupLayout(facultyStatusPanel);
        facultyStatusPanel.setLayout(facultyStatusPanelLayout);
        facultyStatusPanelLayout.setHorizontalGroup(
            facultyStatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(facultyStatusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(facultyNameStatusLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(facultyStatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(facultyStatusButton)
                    .addComponent(facultyStatusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(facultyStatusScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(104, Short.MAX_VALUE))
        );
        facultyStatusPanelLayout.setVerticalGroup(
            facultyStatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(facultyStatusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(facultyStatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(facultyNameStatusLabel)
                    .addComponent(facultyStatusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(facultyStatusButton)
                .addGap(18, 18, 18)
                .addComponent(facultyStatusScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(307, Short.MAX_VALUE))
        );

        commandPane.addTab("Faculty Status", facultyStatusPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(commandPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(182, 182, 182)
                        .addComponent(appLabel)
                        .addGap(182, 182, 182)))
                .addGap(24, 24, 24))
            .addGroup(layout.createSequentialGroup()
                .addGap(215, 215, 215)
                .addComponent(collegeLabel)
                .addGap(215, 215, 215))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(appLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(collegeLabel)
                .addGap(33, 33, 33)
                .addComponent(commandPane)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        commandPane.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    // Addition of new faculty
    private void addFacultyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFacultyButtonActionPerformed
        // TODO add your handling code here:
        // Add the faculty to the faculty table.
        String name = addFacultyTextField.getText();
        Faculty.addFaculty(name);
        addFacultyStatusLabel.setText(name+" has been added to the Faculty.");
        addFacultyTextField.setText("");
        
        // rebuild the reservation faculty combo box.
        rebuildFacultyComboBoxes();
    }//GEN-LAST:event_addFacultyButtonActionPerformed

    
    // Reservation Submission
    private void reserveSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reserveSubmitButtonActionPerformed
        // TODO add your handling code here:
        String facultyName = (String)reserveFacultyComboBox.getSelectedItem();
        Date dateChosen = (Date)reserveDateComboBox.getSelectedItem();
        String seatsCount = (String)reserveSeatsTextField.getText();
        
        if (reserveFacultyComboBox.getSelectedItem() == null || reserveFacultyComboBox.getSelectedItem().equals("")){
            reserveStatusLabel.setText("There is an argument error");
            throw new IllegalArgumentException("You must pick a faculty name before making a reservation");
        }
        if (reserveDateComboBox.getSelectedItem().toString() == null || reserveDateComboBox.getSelectedItem().toString().equals("")){
            reserveStatusLabel.setText("There is an argument error");            
            throw new IllegalArgumentException("You must pick a date before making a reservation");
        }
        if (Integer.parseInt(seatsCount) <= 0 || seatsCount == null){
            reserveStatusLabel.setText("There is an argument error");
            throw new IllegalArgumentException("The number of required seats cannot be non-positive");
        }
        
        
        else{
            
            int seatsNeeded = Integer.parseInt(seatsCount);
            RoomEntry roomForFaculty = getRoom(seatsNeeded, dateChosen, RoomQueries.getRoomsList());
            
            Timestamp currTime = new Timestamp(System.currentTimeMillis());

            
            if (roomForFaculty.seats == 0){ // No rooms left, must be waitlisted
                WaitlistQueries.addWaitlistEntry(facultyName, dateChosen, seatsNeeded, currTime);
                reserveStatusLabel.setText("No rooms are available. " + facultyName + " has been placed on the waitlist.");
            }
            else{ // There are rooms available, so can be reserved
                
                ReservationQueries.addReservationEntry(facultyName, roomForFaculty.name, dateChosen, seatsNeeded, currTime);
                reserveStatusLabel.setText(facultyName+" has reserved room "+roomForFaculty.name);
                reserveSeatsTextField.setText("");
            }
        }        
        
    }//GEN-LAST:event_reserveSubmitButtonActionPerformed

    
    // Reservation Status
    private void reserveStatusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reserveStatusButtonActionPerformed
        reservationStatusTextArea.setVisible(true);
        reservationStatusTextArea.setText("");
        String dateEntered = (String)statusDateComboBox.getSelectedItem().toString();
        
        ArrayList<ReservationEntry> reservationsList = new ArrayList<ReservationEntry>();
        reservationsList = ReservationQueries.getReservationsByDate();
        
        for (ReservationEntry entry : reservationsList) {
            if (entry.date.toString().compareTo(dateEntered) == 0){
                System.out.println(entry.faculty);
                reservationStatusTextArea.setText(reservationStatusTextArea.getText() + entry.faculty + " reserved " + entry.room + "\n");
            }
        }
    }//GEN-LAST:event_reserveStatusButtonActionPerformed

    
    // Waitlist Status
    private void waitlistByDateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_waitlistByDateBtnActionPerformed
        waitlistStatusTextArea.setVisible(true);
        waitlistStatusTextArea.setText("");
        
        ArrayList<WaitlistEntry> waitlist = new ArrayList<WaitlistEntry>();
        waitlist = WaitlistQueries.getWaitlistByDate();
        System.out.println(waitlist);
        sortWaitlist(waitlist);
        
        for (WaitlistEntry entry: waitlist){
            waitlistStatusTextArea.setText(waitlistStatusTextArea.getText() + entry.faculty + " " + entry.date + " " + + entry.seats + "\n");
        }
        
    }//GEN-LAST:event_waitlistByDateBtnActionPerformed

    
    // Add a new Date through Add Values tab
    private void addDateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDateButtonActionPerformed
        // TODO add your handling code here:
        addDateStatusLabel.setText("");
        ArrayList<java.sql.Date> dateList = Dates.getAllDates();
        
        String sdate = addDateTextField.getText();
        java.sql.Date date = Date.valueOf(sdate);   
        
        // Check to see if the date is already in the table
        for (java.sql.Date entry : dateList){
            if (entry.compareTo(date) == 0) {
                addDateStatusLabel.setText("This date has already been added!");
                addDateTextField.setText("");
                break;
            }
        }
        
        // Only attempt to add the date if it is not a repeat value (if the label is empty)
        if (addDateStatusLabel.getText() == "") {
            Dates.addDate(date);
            addDateStatusLabel.setText(date+" has been added to Dates.");
            addDateTextField.setText("");
        }
        
        
        // rebuild the reservation/status date combo boxes.
        rebuildDateComboBoxes();
    }//GEN-LAST:event_addDateButtonActionPerformed

    
    // Add a new Room through Add Values Tab
    private void addRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRoomButtonActionPerformed
        // TODO add your handling code here:
        boolean determiner;
        dropRoomTextArea.setVisible(true);
        dropRoomTextArea.setText("");
        
        String roomName = addRoomNameTextField.getText();
        Integer roomSeats = Integer.parseInt(addRoomSeatsTextField.getText());
        RoomEntry room = new RoomEntry(roomName, roomSeats);
        
        ArrayList<ReservationEntry> reservations = new ArrayList<ReservationEntry>();
        reservations = ReservationQueries.getReservationsByDate();
        
        ArrayList<WaitlistEntry> waitlist = new ArrayList<WaitlistEntry>();
        waitlist = WaitlistQueries.getWaitlistByDate();
        sortWaitlist(waitlist);

        RoomQueries.addRoom(room); 
        addRoomStatusLabel.setText("Room "+roomName+" has been added to Rooms.");
        addDateTextField.setText("");
        
        for (WaitlistEntry wEntry : waitlist) {     // Waitlist sorted by timestamp, checks seat count for priority
            if (wEntry.seats > roomSeats) {} // Waitlisted is asking for more seats than the new room has
            else{ // Can be allotted
                for (ReservationEntry rEntry : reservations) {
                    if (wEntry.date.equals(rEntry.date) && !rEntry.room.equals(roomName)) { // If there is a reservation on the same day, but of different room
                        determiner = true;
                    }
                    else if (!wEntry.date.equals(rEntry.date)){}
                    else{
                        determiner = false;
                        break;
                    }
                    
                }
                
                if (determiner = true) {
                    String waitlistFaculty = wEntry.faculty;
                    java.sql.Date waitlistDate = (java.sql.Date)wEntry.date;
                    Integer waitlistSeats = wEntry.seats;
                    Timestamp waitlistTimestamp = wEntry.timestamp;
                    
                    WaitlistQueries.deleteWaitlistEntry(wEntry.faculty, wEntry.date);
                    ReservationQueries.addReservationEntry(waitlistFaculty, roomName, waitlistDate, waitlistSeats, waitlistTimestamp);
                    
                    dropRoomTextArea.setText(dropRoomTextArea.getText() + waitlistFaculty + " reserved " + roomName + " for " + waitlistDate + "\n");
                }
            }
        }
    }//GEN-LAST:event_addRoomButtonActionPerformed

    
    // Get status of each faculty member
    private void facultyStatusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_facultyStatusButtonActionPerformed
        // TODO add your handling code here:
        facultyStatusTextArea.setVisible(true);
        facultyStatusTextArea.setText("");
        String facultyName = (String)facultyStatusComboBox.getSelectedItem();
        
        ArrayList<ReservationEntry> reservationsList = new ArrayList<ReservationEntry>();
        reservationsList = ReservationQueries.getReservationsByDate();
        
        ArrayList<WaitlistEntry> waitlist = new ArrayList<WaitlistEntry>();
        waitlist = WaitlistQueries.getWaitlistByDate();
        
        for (ReservationEntry entry : reservationsList) {
            if (entry.faculty.compareTo(facultyName) == 0){
                System.out.println(entry.faculty);
                facultyStatusTextArea.setText(facultyStatusTextArea.getText() + entry.faculty + " reserved " + entry.room + " on " + entry.date + "\n");
            }
        }
        
        for (WaitlistEntry entry : waitlist) {
            if (entry.faculty.compareTo(facultyName) == 0){
                System.out.println(entry.faculty);
                facultyStatusTextArea.setText(facultyStatusTextArea.getText() + entry.faculty + " is waitlisted for " + entry.date + "\n");
            }
        }
    }//GEN-LAST:event_facultyStatusButtonActionPerformed

    
    // Cancel a faculty member's reservation on the given day
    private void cancelReservationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelReservationButtonActionPerformed
        // TODO add your handling code here:
        waitlistToReservationLabel.setText("");
        cancelStatusLabel.setText("");
        
        String cancelFacultyName = (String)cancelFacultyComboBox.getSelectedItem();
        java.sql.Date cancelDate = (java.sql.Date)cancelDateComboBox.getSelectedItem();
        
        Integer cancelledSeats = 0;
        Timestamp currTime = new Timestamp(System.currentTimeMillis());
        
        ArrayList<RoomEntry> roomList = new ArrayList<RoomEntry>();
        roomList = RoomQueries.getRoomsList();
        
        ArrayList<ReservationEntry> reservationsList = new ArrayList<ReservationEntry>();
        reservationsList = ReservationQueries.getReservationsByDate();
        
        ArrayList<WaitlistEntry> waitlist = new ArrayList<WaitlistEntry>();
        waitlist = WaitlistQueries.getWaitlistByDate();
        sortWaitlist(waitlist); // This sort sorts the waitlist by timestamp
        
        for (ReservationEntry entry : reservationsList){ // For every reservation
            if (cancelDate.compareTo(entry.date) == 0 && cancelFacultyName.equals(entry.faculty)) { // If the dates and faculty match, reservation has been found
                
                String cancelledRoom = entry.room;
                for (RoomEntry room : roomList) {               // Identify the room that was cancelled and how many seats it had
                    if (room.name.equals(cancelledRoom)) {
                        cancelledSeats = room.seats;
                    }
                }
                
                ReservationQueries.deleteReservation(cancelFacultyName, cancelDate);
                cancelStatusLabel.setText(cancelFacultyName + "'s reservation for " + cancelDate + " has been cancelled.");
                
                for (WaitlistEntry wEntry : waitlist) {     // Waitlist sorted by timestamp, checks seat count for priority
                    if (cancelDate.compareTo(wEntry.date) == 0 && wEntry.seats <= cancelledSeats) {
                        ReservationQueries.addReservationEntry(wEntry.faculty, cancelledRoom, cancelDate, wEntry.seats, currTime); // Creates a reservation with the cancelled room
                        WaitlistQueries.deleteWaitlistEntry(wEntry.faculty, cancelDate); // Deletes the pre-existing waitlist entry
                        waitlistToReservationLabel.setText(wEntry.faculty + " has been moved off the waitlist and has reserved room " + cancelledRoom);
                        break; // Only applies this to ONE WAITLIST ENTRY
                    }
                }
            }
        }
        
        for (WaitlistEntry entry : waitlist){ // In case there is no reservation to cancel, and only a waitlist entry to cancel
            if (cancelDate.compareTo(entry.date) == 0 && cancelFacultyName.equals(entry.faculty)) { // If the dates and faculty match, waitlist entry has been found
                WaitlistQueries.deleteWaitlistEntry(cancelFacultyName, cancelDate);
                cancelStatusLabel.setText(cancelFacultyName + "'s waitlist position for " + cancelDate + " has been cancelled.");
            }
        }
    }//GEN-LAST:event_cancelReservationButtonActionPerformed

    
    private void dropRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropRoomButtonActionPerformed
        // TODO add your handling code here:
        dropRoomTextArea.setVisible(true);
        dropRoomTextArea.setText("");
        String droppedRoomName = dropRoomTextField.getText();
        
        ArrayList<ReservationEntry> reservations = new ArrayList<ReservationEntry>();
        reservations = ReservationQueries.getReservationsByDate();
        
        ArrayList<RoomEntry> roomList = new ArrayList<RoomEntry>();
        roomList = RoomQueries.getRoomsList();
        
        // Delete all instances of the room
        for (RoomEntry room : roomList) {
            if (room.name.equals(droppedRoomName)) {
                RoomQueries.dropRoom(droppedRoomName);
                dropRoomTextArea.setText("Room " + droppedRoomName + " has been dropped.\n");
            }
        }
        
        // Process individual reservations at the room
        for (ReservationEntry reservation : reservations) {
            if (reservation.room.equals(droppedRoomName)) {
                RoomEntry newFacultyRoom = getRoom(reservation.seats, (java.sql.Date)reservation.date, roomList);
                
                String reservationFaculty = reservation.faculty; // Saving values so name, etc aren't lost upon deletion
                java.sql.Date reservationDate = (java.sql.Date)reservation.date;
                Integer reservationSeats = reservation.seats;
                Timestamp reservationTimestamp = reservation.timestamp;
                
                ReservationQueries.deleteReservation(reservation.faculty, reservation.date); // Reservation deleted

                if (newFacultyRoom.seats == 0) {
                    WaitlistQueries.addWaitlistEntry(reservationFaculty, reservationDate, reservationSeats, reservationTimestamp); // No room available
                    dropRoomTextArea.setText(dropRoomTextArea.getText() + reservationFaculty+ " has been placed on the waitlist on " + reservationDate + "\n");
                }
                else {
                    ReservationQueries.addReservationEntry(reservationFaculty, newFacultyRoom.name, reservationDate, reservationSeats, reservationTimestamp); // Reserved new room
                    dropRoomTextArea.setText(dropRoomTextArea.getText() + reservationFaculty+ " has reserved room " + newFacultyRoom.name + " on " + reservationDate + "\n");
                }
            }
        }
    }//GEN-LAST:event_dropRoomButtonActionPerformed
 
    
    // Sort the waitlist by date, then timestamp
    public static void sortWaitlist(ArrayList<WaitlistEntry> entries)
    {
        
        for (int i = 0; i < entries.size(); i++)
            for (int j = 0; j < entries.size() - 1; j++)
            {
                // Same date
                if (entries.get(j).date.toString().equals(entries.get(j + 1).date.toString()))
                {
                    // Now compare timestamp (left > right) then swap to put lower one on the left
                    if (entries.get(j).timestamp.after(entries.get(j + 1).timestamp))
                        java.util.Collections.swap(entries, j, j + 1);
                }
            }
        
    }
    
    
    // Checks which room should be allotted according to minimum size
    public static RoomEntry getRoom(int minSeats, java.sql.Date dateOfReservation, ArrayList<RoomEntry> entries)
    {
        // System.out.println("Date: " + dateOfReservation.toString());
        
        // Get all current reservations
        ArrayList<ReservationEntry> reservations = ReservationQueries.getReservationsByDate();
        
        for (int i = 0; i < entries.size(); i++)
            for (int j = 0; j < entries.size() - 1; j++)
            {
                if (entries.get(j).seats > entries.get(j + 1).seats)
                {
                    java.util.Collections.swap(entries, j, j + 1);
                }
            }
        
        for (int i = 0; i < entries.size(); i++)
            if (entries.get(i).seats >= minSeats && !roomReserved(entries.get(i), reservations, dateOfReservation))
                return entries.get(i);
        
        // Didn't work cause all rooms are taken
        
        // Now indicate this person needs to be put on waitlist    
        return new RoomEntry("None", 0);
    }
    
    
    // Checks if a room is already reserved
    public static boolean roomReserved(RoomEntry room, ArrayList<ReservationEntry> reservations, java.sql.Date dateOfReservation)
    {
        for (int i = 0 ; i < reservations.size(); i++)
            if (reservations.get(i).room.equals(room.name))
            {
//                System.out.println(reservations);
//                System.out.println(room.name);
//                System.out.println(reservations.get(i).room);
//                System.out.println("Found room, date: " + reservations.get(i).date.toString());
//                System.out.println(dateOfReservation.toString());
                
                if (reservations.get(i).date.toString().equals(dateOfReservation.toString()))
                    return true;
            }
        
        return false;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RoomSchedulerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RoomSchedulerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RoomSchedulerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RoomSchedulerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RoomSchedulerFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDateButton;
    private javax.swing.JLabel addDateStatusLabel;
    private javax.swing.JTextField addDateTextField;
    private javax.swing.JButton addFacultyButton;
    private javax.swing.JPanel addFacultyPanel;
    private javax.swing.JLabel addFacultyStatusLabel;
    private javax.swing.JTextField addFacultyTextField;
    private javax.swing.JButton addRoomButton;
    private javax.swing.JTextField addRoomNameTextField;
    private javax.swing.JTextField addRoomSeatsTextField;
    private javax.swing.JLabel addRoomStatusLabel;
    private javax.swing.JLabel addValueDateLabel;
    private javax.swing.JLabel addValueFacultyLabel;
    private javax.swing.JLabel appLabel;
    private javax.swing.JComboBox<String> cancelDateComboBox;
    private javax.swing.JLabel cancelDateLabel;
    private javax.swing.JComboBox<String> cancelFacultyComboBox;
    private javax.swing.JLabel cancelFacultyLabel;
    private javax.swing.JButton cancelReservationButton;
    private javax.swing.JLabel cancelReservationLabel;
    private javax.swing.JLabel cancelStatusLabel;
    private javax.swing.JLabel collegeLabel;
    private javax.swing.JTabbedPane commandPane;
    private javax.swing.JLabel dateChooseLabel;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JButton dropRoomButton;
    private javax.swing.JLabel dropRoomLabel;
    private javax.swing.JLabel dropRoomNameLabel;
    private javax.swing.JTextArea dropRoomTextArea;
    private javax.swing.JTextField dropRoomTextField;
    private javax.swing.JLabel facultyChooseLabel;
    private javax.swing.JLabel facultyNameLabel;
    private javax.swing.JLabel facultyNameStatusLabel;
    private javax.swing.JButton facultyStatusButton;
    private javax.swing.JComboBox<String> facultyStatusComboBox;
    private javax.swing.JPanel facultyStatusPanel;
    private javax.swing.JScrollPane facultyStatusScrollPane;
    private javax.swing.JTextArea facultyStatusTextArea;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel reservationStatusPanel;
    private javax.swing.JScrollPane reservationStatusScrollPane;
    private javax.swing.JTextArea reservationStatusTextArea;
    private javax.swing.JComboBox<String> reserveDateComboBox;
    private javax.swing.JLabel reserveDateLabel;
    private javax.swing.JComboBox<String> reserveFacultyComboBox;
    private javax.swing.JLabel reserveOptionLabel;
    private javax.swing.JPanel reserveRoomPanel;
    private javax.swing.JTextField reserveSeatsTextField;
    private javax.swing.JButton reserveStatusButton;
    private javax.swing.JLabel reserveStatusLabel;
    private javax.swing.JButton reserveSubmitButton;
    private javax.swing.JLabel roomLabel;
    private javax.swing.JLabel roomNameLabel;
    private javax.swing.JLabel roomSeatsLabel;
    private javax.swing.JLabel seatsRequiredLabel;
    private javax.swing.JComboBox<String> statusDateComboBox;
    private javax.swing.JButton waitlistByDateBtn;
    private javax.swing.JPanel waitlistStatusPanel;
    private javax.swing.JScrollPane waitlistStatusScrollPane;
    private javax.swing.JTextArea waitlistStatusTextArea;
    private javax.swing.JLabel waitlistToReservationLabel;
    // End of variables declaration//GEN-END:variables
}
